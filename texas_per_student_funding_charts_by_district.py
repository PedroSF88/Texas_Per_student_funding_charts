# -*- coding: utf-8 -*-
"""Texas_Per_student_funding_charts_by_district

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPstvtjH1wIw3gxsOVC6hfsKjI0N1yv3
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

# file to df
import io
df1 = pd.read_csv(io.BytesIO(uploaded['2007-2022-summarized-peims-financial-data.csv']))
# Dataset is now stored in a Pandas Dataframe

#rename columns to remove spaces, show df1
df1.rename(columns=lambda x: x.replace(' ', '_'), inplace=True)


df1.head()

df1['DISTRICT_NAME'] = df1['DISTRICT_NAME'].str.replace(' ', '_')

df1.info()

#list of columns from GEN FUNDS
GEN = [col for col in df1.columns if 'GEN' in col]

print(GEN)

#list of columns from ALL FUNDS
ALL = [col for col in df1.columns if 'ALL' in col]

print(ALL)

#list of columns from FEDERAL FUNDS
FED = [col for col in df1.columns if 'FEDERAL' in col]

print(FED)

#DF of ALL funds + District name, YEAR, Fall enrollment
col_to_select =  ['DISTRICT_NUMBER',
 'DISTRICT_NAME',
 'YEAR'] + ALL
df_ALLfunds = df1[col_to_select]

# PER STUDENT FUNDING

# Define the columns to be divided

columns_to_exclude = ['FALL_SURVEY_ENROLLMENT', 'DISTRICT_NUMBER', 'DISTRICT_NAME', 'YEAR']
columns_to_divide = [col for col in df_ALLfunds.columns if col not in columns_to_exclude]

divisor_column = 'FALL_SURVEY_ENROLLMENT'  # specifying the divisor column

# Convert divisor column to numeric type
df_ALLfunds[divisor_column] = pd.to_numeric(df_ALLfunds[divisor_column], errors='coerce')

# Iterate over columns and perform division
for col in columns_to_divide:
    # Skip if the column is the divisor column itself
    if col != divisor_column:
        # Convert current column to numeric type
        df_ALLfunds[col] = pd.to_numeric(df_ALLfunds[col], errors='coerce')
        # Perform division
        df_ALLfunds[col] = df_ALLfunds[col] / df_ALLfunds[divisor_column].round(2)

import pandas as pd
import matplotlib.pyplot as plt
from ipywidgets import widgets, interact

# Assuming df_ALLfunds is your DataFrame

# Grouping by DISTRICT_NAME
grouped = df_ALLfunds.groupby('DISTRICT_NAME')

# Get unique district names
district_names = list(grouped.groups.keys())

# Dropdown widget to select districts
dropdown_district = widgets.SelectMultiple(
    options=district_names,
    description='Select Districts:'
)

# Dropdown widget to select column
dropdown_column = widgets.Dropdown(
    options=df_ALLfunds.columns[3:],
    description='Select Column:'
)

# Function to update bar graph based on selected districts and column
def update_bar_graphs(selected_districts, selected_column):
    # Filter DataFrame based on selected districts
    selected_df = pd.concat([grouped.get_group(district) for district in selected_districts])

    # Generate bar graph for the selected column
    plt.figure(figsize=(10, 6))
    num_years = len(selected_df['YEAR'].unique())
    bar_width = 0.35
    index = selected_df['YEAR'].unique()
    for i, district in enumerate(selected_districts):
        district_data = selected_df[selected_df['DISTRICT_NAME'] == district]
        plt.bar(index + i * bar_width, district_data[selected_column], bar_width, label=district)
    plt.title(f'{selected_column} for {", ".join(selected_districts)}')
    plt.xlabel('Year')
    plt.ylabel(selected_column)
    plt.xticks(index + bar_width * (len(selected_districts) - 1) / 2, index)
    plt.legend()
    plt.show()

# Display the dropdowns and interactive bar graph
interact(update_bar_graphs, selected_districts=dropdown_district, selected_column=dropdown_column)
